from rest_framework.decorators import api_view
from rest_framework.response import Response
from malware_detection.models import MalwareDetector
import logging, os, tempfile
logger = logging.getLogger(__name__)

@api_view(['POST'])
def scan_file(request):
    try:
        if 'file' not in request.FILES:
            return Response({"error": "No file provided"}, status=400)
        
        uploaded_file = request.FILES['file']
        logger.info(f"Received file: {uploaded_file.name} ({uploaded_file.size} bytes)")
        
        # Save to temp file
        with tempfile.NamedTemporaryFile(delete=False) as tmp:
            for chunk in uploaded_file.chunks():
                tmp.write(chunk)
            tmp_path = tmp.name
        
        detector = MalwareDetector()
        result = detector.scan_file(tmp_path)
        
        # Clean up
        os.unlink(tmp_path)
        
        # Add original filename to results
        result['original_filename'] = uploaded_file.name
        result['temp_filename'] = os.path.basename(tmp_path)  # Optional: for debugging
        
        if 'confidence' in result and isinstance(result['confidence'], (float, int)):
            result['confidence'] = float(result['confidence'])
        
        return Response(result)
        
    except Exception as e:
        logger.error(f"Scan failed: {str(e)}", exc_info=True)
        return Response({"error": str(e)}, status=500)

@api_view(['POST'])
def scan_system(request):
    """API to scan the entire system or a given path."""
    scan_path = request.data.get('path', '/')  # Default: root directory
    detector = MalwareDetector()
    results = detector.scan_directory(scan_path)
    return Response({
        "scanned_path": scan_path,
        "malicious_files": [r for r in results if r.get("is_malicious")],
        "total_files": len(results)
    })